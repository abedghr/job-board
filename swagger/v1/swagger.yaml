openapi: 3.0.3
info:
  title: Job-Board APIs
paths:
  /api/register:
    post:
      tags:
        - "Authentication"
      summary: Register a new normal user
      description: Register a new normal user.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRegistrationRequest' # Reference to the request schema
      responses:
        '201':
          description: User registered successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  auth_token:
                    type: string
                  user:
                    $ref: '#/components/schemas/User' # Reference to the User schema
        '422':
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: array
                    items:
                      type: string
  /api/login:
    post:
      tags:
        - "Authentication"
      summary: User login
      description: Authenticate a user by logging in.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserLoginRequest' # Reference to the request schema
      responses:
        '200':
          description: User authenticated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  auth_token:
                    type: string
                  user:
                    $ref: '#/components/schemas/User' # Reference to the User schema
        '401':
          description: Unauthorized
  /api/refresh:
    post:
      tags:
        - "Authentication"
      summary: Refresh Token
      description: Generate new Tokens.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRefreshRequest' # Reference to the request schema
      responses:
        '200':
          description: User authenticated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  auth_token:
                    type: string
                  user:
                    $ref: '#/components/schemas/User' # Reference to the User schema
        '401':
          description: Unauthorized
  /api/users:
    get:
      tags:
        - "Authentication"
      summary: Get user information
      description: Retrieve user information for the currently authenticated user.
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User' # Reference to the User schema
        '401':
          description: Unauthorized
  /api/admin_applications:
    get:
      tags:
        - "Admin Application"
      summary: Get a list of applications for admin
      description: Retrieve a list of applications with pagination.
      security:
        - bearerAuth: []
      parameters:
        - name: page
          in: query
          description: Page number for pagination
          required: true
          schema:
            type: integer
        - name: limit
          in: query
          description: Number of items per page
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Application' # Reference to the Application schema
                  next:
                    type: object
                    properties:
                      url:
                        type: string
                      offset:
                        type: integer
        '401':
          description: Unauthorized
  /api/admin_applications/{id}:
    parameters:
      - name: id
        in: path
        description: ID of the application to retrieve
        required: true
        schema:
          type: integer
    get:
      tags:
        - "Admin Application"
      summary: Get an application by ID for Admin
      description: Retrieve a specific application by ID.
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Application' # Reference to the Application schema
        '404':
          description: Application not found
  /api/admin_posts:
    get:
      tags:
        - "Admin Post"
      summary: Get a list of posts For normal user
      description: Retrieve a list of posts with pagination.
      security:
        - bearerAuth: []
      parameters:
        - name: page
          in: query
          description: Page number for pagination
          required: true
          schema:
            type: integer
        - name: limit
          in: query
          description: Number of items per page
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Post' # Reference to the Post schema
                  next:
                    type: object
                    properties:
                      url:
                        type: string
                      offset:
                        type: integer
        '401':
          description: Unauthorized
    post:
      tags:
        - "Admin Post"
      summary: Create a new post By Admin
      description: Create a new post.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostCreateRequest' # Reference to the request schema
      responses:
        '201':
          description: Post created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post' # Reference to the Post schema
        '422':
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: array
                    items:
                      type: string
        '401':
          description: Unauthorized
  /api/admin_posts/{id}:
    parameters:
      - name: id
        in: path
        description: ID of the post to update
        required: true
        schema:
          type: integer
    put:
      tags:
        - "Admin Post"
      summary: Update a post by ID From Admin Side
      description: Update an existing post by ID.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostUpdateRequest' # Reference to the request schema
      responses:
        '200':
          description: Post updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post' # Reference to the Post schema
        '404':
          description: Post not found
        '422':
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: array
                    items:
                      type: string
        '401':
          description: Unauthorized
    delete:
      tags:
        - "Admin Post"
      summary: Delete a post by ID From Admin Side
      description: Delete a post by ID.
      security:
        - bearerAuth: []
      responses:
        '204':
          description: Post deleted successfully
        '404':
          description: Post not found
        '422':
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: array
                    items:
                      type: string
        '401':
          description: Unauthorized
  /api/applications:
    get:
      tags:
        - "Application"
      summary: Get a list of applications for the current normal user
      description: Retrieve a list of applications for the current user with pagination.
      security:
        - bearerAuth: []
      parameters:
        - name: page
          in: query
          description: Page number for pagination
          required: true
          schema:
            type: integer
        - name: limit
          in: query
          description: Number of items per page
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Application' # Reference to the Application schema
                  next:
                    type: object
                    properties:
                      url:
                        type: string
                      offset:
                        type: integer
        '401':
          description: Unauthorized
    post:
      tags:
        - "Application"
      summary: Create a new application By normal user
      description: Create a new application.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApplicationCreateRequest' # Reference to the request schema
      responses:
        '201':
          description: Application created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Application' # Reference to the Application schema
        '422':
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: array
                    items:
                      type: string
        '401':
          description: Unauthorized
  /api/applications/{id}:
    parameters:
      - name: id
        in: path
        description: ID of the application to retrieve
        required: true
        schema:
          type: integer
    get:
      tags:
        - "Application"
      summary: Get an application by ID For normal user
      description: Retrieve a specific application by ID.
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Application' # Reference to the Application schema
        '404':
          description: Application not found
        '401':
          description: Unauthorized
  /api/posts:
    get:
      tags:
        - "Post"
      summary: Get a list of active posts for normal user
      description: Retrieve a list of active posts with pagination.
      security:
        - bearerAuth: []
      parameters:
        - name: page
          in: query
          description: Page number for pagination
          required: true
          schema:
            type: integer
        - name: limit
          in: query
          description: Number of items per page
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Post' # Reference to the Post schema
                  next:
                    type: object
                    properties:
                      url:
                        type: string
                      offset:
                        type: integer
        '401':
          description: Unauthorized

components:
  securitySchemes:  
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    User:
      type: object
      properties:
        auth_token:
          type: string
        user:
          type: object
          properties:
            id:
              type: integer
            email:
              type: string
            role:
              type: string
            created_at:
              type: string
    Application:
      type: object
      properties:
        id:
          type: integer
        user_id:
          type: integer
        post_id:
          type: integer
        status:
          type: string
        resume:
          type: string
        seen_at:
          type: string
        created_at:
          type: string
        user:
          type: object
          properties:
            id:
              type: integer
            email:
              type: string
            role:
              type: string
            created_at:
              type: string
        post:
          type: object
          properties:
            id:
              type: integer
            user_id:
              type: integer
            title:
              type: string
            description:
              type: string
            is_active:
              type: boolean
            created_at:
              type: string
    Post:
      type: object
      properties:
        id:
          type: integer
        user_id:
          type: integer
        title:
          type: string
        description:
          type: string
        is_active:
          type: boolean
        created_at:
          type: string
        user:
          type: object
          properties:
            id:
              type: integer
            email:
              type: string
            role:
              type: string
            created_at:
              type: string
    UserRegistrationRequest:
      type: object
      properties:
        email:
          type: string
        password:
          type: string
        password_confirmation:
          type: string
      required:
        - email
        - password
        - password_confirmation
    UserLoginRequest:
      type: object
      properties:
        email:
          type: string
        password:
          type: string
      required:
        - email
        - password
    UserRefreshRequest:
      type: object
      properties:
        refresh_token:
          type: string
      required:
        - refresh_token
    PostCreateRequest:
      type: object
      properties:
        title:
          type: string
        description:
          type: string
      required:
        - title
        - description
    PostUpdateRequest:
      type: object
      properties:
        title:
          type: string
        description:
          type: string
    ApplicationCreateRequest:
      type: object
      properties:
        post_id:
          type: string
        resume:
          type: string
      required:
        - post_id
        - resume
        
